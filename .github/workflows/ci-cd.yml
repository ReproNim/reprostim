# This workflows build and test reprostim singularity container.

name: CI/CD Container

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Force tox and pytest to use color
  FORCE_COLOR: true

jobs:
  build-singularity:
    runs-on: ubuntu-22.04

    steps:
      - name: Set env
        run: |
          echo "RELEASE_VERSION=v3.7.1" >> $GITHUB_ENV
          echo "NO_ET=TRUE" >> $GITHUB_ENV

      - name: Checkout Singularity source
        uses: actions/checkout@v4
        with:
          repository: hpcng/singularity
          ref: 'v3.7.1'
          path: 'singularity'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.13'

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.1 \
            libarchive-dev libgpgme11-dev libseccomp-dev wget gcc make pkg-config \
            xvfb xdotool ffmpeg

      - name: Build and install Singularity
        run: |
          cd singularity
          ./mconfig --without-suid -p /usr/local/
          make -C builddir
          sudo make -C builddir install
          cd ..

      - name: Verify Singularity version
        run: singularity --version

      - name: Checkout your repo (for Singularity.def)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Singularity container
        run: |
          pwd
          cd tools/ci
          ./build_reprostim_container.sh
          cd ../..
          pwd

      - name: Test Singularity container run
        run: |
          singularity --version
          pwd
          cd tools/ci
          ./test_reprostim_container.sh --version
          cd ../..
          pwd

      - name: Test timesync-stimuli run
        run: |
          export FRAME_WIDTH=1920
          export FRAME_HEIGHT=1080
          export FRAME_RATE=60
          export FRAME_BPP=24
          export DISPLAY_PATH="/tmp/reprostim_last_display.txt"
          export XVFB_OPTS="-screen 0 ${FRAME_WIDTH}x${FRAME_HEIGHT}x${FRAME_BPP} -ac +extension GLX +render -noreset"
          export DISPLAY_START=25
          export REPROSTIM_CMD="./run_reprostim_container.sh timesync-stimuli -m event --mute -d \$(cat /tmp/reprostim_last_display.txt)"
          cd tools/ci
          echo "Run Xvfb in background with REPROSTIM_CMD"
          xvfb-run -a -n $DISPLAY_START -s "$XVFB_OPTS" bash -c "echo \$DISPLAY > ${DISPLAY_PATH}; $REPROSTIM_CMD"&
          XVFB_RUN_PID=$!
          echo "Started xvfb-run with PID $XVFB_RUN_PID"
          echo "Wait for Xvfb to start"
          sleep 5
          export DISPLAY=$(cat ${DISPLAY_PATH})
          echo "Xvfb started on display: $DISPLAY"
          echo "Send test pulse events"
          ./test_reprostim_events.sh 2 5 5 1.5 20 "${DISPLAY}" &
          echo "Record video for 45 seconds"
          ffmpeg -video_size ${FRAME_WIDTH}x${FRAME_HEIGHT} -framerate ${FRAME_RATE} -f x11grab -i $DISPLAY -t 45 -c:v libx264 -pix_fmt yuv420p /tmp/reprostim_screenshot${DISPLAY}_$(date +%Y-%m-%d_%H:%M:%S).mp4
          sleep 45
          ls -l /tmp/reprostim_*
          echo "Kill Xvfb at the end"
          sleep 1
          kill $XVFB_RUN_PID 2>/dev/null || true
          wait $XVFB_RUN_PID 2>/dev/null || true
