#!/usr/bin/env python3
from time import time, sleep
t0 = time()

import click
from enum import Enum
import logging
import sys
import os
import shutil
import json
from datetime import datetime
import qrcode


# setup logging
logger = logging.getLogger(__name__)
handler = logging.StreamHandler(sys.stderr)
formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
handler.setFormatter(formatter)
logging.getLogger().addHandler(handler)
logger.setLevel(logging.DEBUG)
logger.info("reprostim-timesync-stimuli script started")

# setup psychopy logs
from psychopy import logging as pl
#pl.console.setLevel(pl.NOTSET)
pl.console.setLevel(pl.DEBUG)


from psychopy import visual, core, event, clock
#from psychopy.hardware import keyboard


#######################################################
# Constants


# Enum for the mode of the script operation
class Mode(str, Enum):
    # Listen for keyboard events to show codes
    EVENT = "event"
    # Show codes at regular intervals
    INTERVAL = "interval"
    # Just play a beep
    BEEP = "beep"
    # List audio/video devices
    DEVICES = "devices"


#######################################################
# Functions

def get_iso_time(t):
    return datetime.fromtimestamp(t).astimezone().isoformat()


def get_output_file_name(prefix: str,
                         start_ts: datetime,
                         end_ts: datetime=None) -> str:
    start_str: str = get_ts_str(start_ts)
    end_str: str = get_ts_str(end_ts) if end_ts else ""
    return f"{prefix}{start_str}--{end_str}.log"

def get_times():
    t = time()
    return t, get_iso_time(t)


def get_ts_str(ts: datetime) -> str:
    ts_format = "%Y.%m.%d-%H.%M.%S.%f"
    return f"{ts.strftime(ts_format)[:-3]}"


def log(f, rec):
    s = json.dumps(rec).rstrip()
    f.write(s + os.linesep)
    logger.debug(f"LOG {s}")


def mkrec(mode, logfn, interval, **kwargs):
    t, tstr = get_times()
    kwargs.update({
        "logfn": logfn,
        "time": t,
        "time_formatted": tstr,
        "mode": mode,
    })
    if mode == 'interval':
        kwargs['interval'] = interval
    return kwargs


def check_keys(max_wait: float=0) -> list[str]:
    keys: list[str]
    if max_wait > 0:
        keys = event.waitKeys(maxWait=max_wait)
    else:
        keys = event.getKeys()
    logger.debug(f"keys={keys}")
    return keys if keys else []

def safe_remove(file_name: str):
    if file_name:
        if os.path.isfile(file_name):  # Check if it's a file
            try:
                os.remove(file_name)
                logger.debug(f"File {file_name} deleted successfully.")
            except Exception as e:
                logger.error(f"Failed delete file {file_name}: {e}")
        else:
            logger.warning(f"File {file_name} does not exist or is not a valid file.")

def store_soundcode(sound_file: str, sound_data: int, logfn: str):
    # if sound_file exits, copy it to {logfn}soundcode_{sound_data}.wav
    if os.path.isfile(sound_file):
        sfile = f"{os.path.splitext(logfn)[0]}soundcode_{sound_data}.wav"
        shutil.copy(sound_file, sfile)


#######################################################
# Main script code

def do_init(logfn: str) -> bool:
    if os.path.exists(logfn):
        logger.error(f"Log file {logfn} already exists")
        return False
    return True


def do_main(mode: Mode, logfn: str,
            display: int, qr_scale: float,
            sound_codec: str, mute: bool,
            ntrials: int, duration: float, interval: float,
            keep_soundcode: bool) -> int:
    logger.info("main script started")

    # late sound init
    from soundcode import (beep, list_audio_devices,
                           save_soundcode, play_sound,
                           SoundCodec, SoundCodeInfo)

    #soundcode.logger.setLevel(logging.DEBUG)

    # print(json.dumps(mkrec(mode, logfn, interval, blah=123), indent=4))

    if mode == Mode.BEEP:
        for i in range(ntrials):
            beep(interval*0.5, async_=True)
            sleep(interval)
        return 0

    if mode == Mode.DEVICES:
        list_audio_devices()
        return 0

    sound_data: int = 0
    sound_file: str = None
    sound_info: SoundCodeInfo = None
    f = open(logfn, "w")

    win = visual.Window(fullscr=True, screen=display)
    win.mouseVisible = False # hides the mouse pointer

    log(f, mkrec(mode, logfn, interval,
              event="started", start_time=t0, start_time_formatted=get_iso_time(t0)))

    message = visual.TextStim(win, text="""Waiting for scanner trigger.\nInstructions
            for Participant...""")
    message.draw()

    fixation = visual.TextStim(win, text='+')
    reproinMessage = visual.TextStim(win, text="", pos=(0, -.7),
            height=.05)

    win.flip()


    fixation.draw()  # Change properties of existing stim
    win.flip()

    spd = 0.500 # Stimulus Presentation Duration
    soa = 6.000 # Stimulus Onset Asynchrony
    iwt = 5 # Initial Wait Time between scanner trigger and first stimulus

    stim_images = []
    stim_names = []
    keys = []  # None received/expected

    #kb = keyboard.Keyboard()

    clk = clock.Clock()
    t_start = time()

    logger.debug(f"warming time: {(t_start-t0):.6f} sec")
    logger.info(f"starting loop with {ntrials} trials...")


    for acqNum in range(ntrials):
        logger.debug(f"trial {acqNum}")

        rec = mkrec(
            mode,
            logfn,
            interval,
            event="trigger",
            acqNum=acqNum
        )

        if mode == Mode.EVENT:
            print("Waiting for an event")
            keys = check_keys(120) # keyList=['5'])
        elif mode == Mode.INTERVAL:
            #keys = kb.getKeys(waitRelease=False)
            keys = check_keys()
            # prepare sound code file if any
            if not mute:
                if keep_soundcode and sound_file:
                    store_soundcode(sound_file, sound_data, logfn)
                safe_remove(sound_file)
                sound_data = acqNum
                sound_file, sound_info_ = save_soundcode(
                    code_uint16=sound_data,
                    codec=sound_codec)
                sound_info = sound_info_
                logger.debug(f"  {sound_info}")

            target_time = t_start + acqNum * interval
            to_wait = target_time - time()
            # sleep some part of it if long enough
            if to_wait >= .2:
                sleep(to_wait * 0.7)
            # busy loop without sleep to not miss it
            while time() < target_time:
                sleep(0) # pass CPU to other threads
        else:
            raise ValueError(mode)

        if not mute:
            d = play_sound(sound_file, async_=True)
            sound_time, sound_time_str = get_times()
            rec['s_time'] = sound_time
            rec['s_time_str'] = sound_time_str
            rec['s_data'] = sound_data
            rec['s_codec'] = sound_codec
            rec['s_f0'] = sound_info.f0
            rec['s_f1'] = sound_info.f1
            rec['s_pre_delay'] = sound_info.pre_delay
            rec['s_post_delay'] = sound_info.post_delay
            rec['s_duration'] = sound_info.duration
            if sound_codec == SoundCodec.NFE:
                rec['s_freq'] = sound_info.nfe_freq
                rec['s_df'] = sound_info.nfe_df

            # NOTE: should we add codec info to the log?
            # like f0, f1, sampleRate, bit_duration, duration, etc

        rec['keys'] = keys
        tkeys, tkeys_str = get_times()
        rec["keys_time"] = tkeys
        rec["keys_time_str"] = tkeys_str
        qr = visual.ImageStim(win,
                              qrcode.make(json.dumps(rec)),
                              pos=(0, 0)
                              )
        qr.size = qr.size * qr_scale
        qr.draw()
        win.flip()
        tflip, tflip_str = get_times()
        rec['time_flip'] = tflip
        rec['time_flip_formatted'] = tflip_str
        core.wait(0.5)
        fixation.draw()
        win.flip()
        toff, toff_str = get_times()
        rec['prior_time_off'] = toff
        rec['prior_time_off_str'] = toff_str
        log(f, rec)
        if 'q' in keys or 'escape' in keys:
            break

    f.close()

    if keep_soundcode and sound_file:
        store_soundcode(sound_file, sound_data, logfn)
    # cleanup temporary sound file if any
    safe_remove(sound_file)
    logger.info("main script finished")
    return 0


@click.command(help='PsychoPy reprostim-timesync-stimuli script.')
@click.option('-m', '--mode', type=click.Choice([mode.value for mode in Mode],
                                                case_sensitive=False),
              default=Mode.EVENT,
              help='Mode of operation: event, interval, or beep.')
@click.option('-o', '--output-prefix', default="output_", type=str,
              help='Output log file name prefix.')
@click.option('-d', '--display', default=1, type=int,
              help='Display number as an integer (default: 1).')
@click.option('-s', '--qr-scale', default=0.8, type=float,
              help='Specify QR code scale factor in range 0..1. '
                   'Use 1.0 to fit full height (default: 0.8).')
@click.option('-a', '--audio-lib',
              type=click.Choice(['psychopy_sounddevice',
                                 'psychopy_ptb',
                                 'sounddevice'],
                                case_sensitive=True),
              default='psychopy_sounddevice',
              help='Specify audio library to be used '
                   '(default: psychopy_sounddevice).')
@click.option('-c', '--sound-codec',
              type=click.Choice(['FSK', 'NFE'],
                                case_sensitive=True),
              default='FSK',
              help='Specify sound codec to produce audio code '
                   '(default: FSK).')
@click.option('-m', '--mute', is_flag=True, default=False,
              help="Disable sound codes generation (default is False).")
@click.option('-t', '--trials', default=300, type=int,
              help='Specifies number of trials.')
@click.option('-d', '--duration', default=2, type=float,
              help='Specifies script duration in seconds.')
@click.option('-i', '--interval', default=2, type=float,
              help='Specifies interval value (default: 2.0).')
@click.option('-k', '--keep-soundcode', is_flag=True, default=False,
              help="Store soundcode as separate .wav files "
                   "for debug purposes (default is False).")
@click.option('-l', '--log-level', default='DEBUG',
              type=click.Choice(['DEBUG', 'INFO',
                                 'WARNING', 'ERROR',
                                 'CRITICAL']),
              help='Set the logging level')
@click.pass_context
def main(ctx, mode: str,
         output_prefix: str,
         display: int,
         qr_scale: float,
         audio_lib: str,
         sound_codec: str,
         mute: bool,
         trials: int,
         duration: float,
         interval: float,
         keep_soundcode: bool,
         log_level):
    logger.setLevel(log_level)
    # psychopy has similar logging levels like
    # default logging module
    #pl.console.setLevel(log_level)
    start_ts: datetime = datetime.now()
    logger.debug("reprostim-timesync-stimuli script started")
    logger.debug(f"  Started on : {start_ts}")
    logger.debug(f"    mode     : {mode}")
    logger.debug(f"    prefix   : {output_prefix}")
    logger.debug(f"    display  : {display}")
    logger.debug(f"    audio_lib: {audio_lib}")
    logger.debug(f"    mute     : {mute}")
    logger.debug(f"    duration : {duration}")
    logger.debug(f"    interval : {interval}")

    output: str = get_output_file_name(output_prefix, start_ts)
    logger.debug(f"    output   : {output}")

    # setup environment variables
    os.environ['REPROSTIM_AUDIO_LIB'] = audio_lib
    os.environ['REPROSTIM_LOG_LEVEL'] = log_level

    if not do_init(output):
        logger.error()
        return -1

    res = do_main(mode, output,
                  display, qr_scale,
                  sound_codec, mute,
                  trials, duration, interval,
                  keep_soundcode)

    end_ts: datetime = datetime.now()
    logger.debug(f"  Finished on: {end_ts}")

    # rename log file if any
    output2: str = get_output_file_name(output_prefix, start_ts, end_ts)
    if os.path.exists(output):
        os.rename(output, output2)
        logger.info(f"Output log renamed: {output} -> {output2}")

    logger.info(f"reprostim-timesync-stimuli script finished: {res}")
    return res



if __name__ == '__main__':
    code = main()
    logger.info(f"Exit on   : {datetime.now()}")
    logger.info(f"Exit code : {code}")
    sys.exit(code)
